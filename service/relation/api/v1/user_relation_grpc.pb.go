// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: user_relation.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserRelationServiceClient is the client API for UserRelationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserRelationServiceClient interface {
	AddFriend(ctx context.Context, in *AddFriendRequest, opts ...grpc.CallOption) (*AddFriendResponse, error)
	ConfirmFriend(ctx context.Context, in *ConfirmFriendRequest, opts ...grpc.CallOption) (*ConfirmFriendResponse, error)
	DeleteFriend(ctx context.Context, in *DeleteFriendRequest, opts ...grpc.CallOption) (*DeleteFriendResponse, error)
	AddBlacklist(ctx context.Context, in *AddBlacklistRequest, opts ...grpc.CallOption) (*AddBlacklistResponse, error)
	DeleteBlacklist(ctx context.Context, in *DeleteBlacklistRequest, opts ...grpc.CallOption) (*DeleteBlacklistResponse, error)
	GetFriendList(ctx context.Context, in *GetFriendListRequest, opts ...grpc.CallOption) (*GetFriendListResponse, error)
	GetBlacklist(ctx context.Context, in *GetBlacklistRequest, opts ...grpc.CallOption) (*GetBlacklistResponse, error)
	GetUserRelation(ctx context.Context, in *GetUserRelationRequest, opts ...grpc.CallOption) (*GetUserRelationResponse, error)
}

type userRelationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserRelationServiceClient(cc grpc.ClientConnInterface) UserRelationServiceClient {
	return &userRelationServiceClient{cc}
}

func (c *userRelationServiceClient) AddFriend(ctx context.Context, in *AddFriendRequest, opts ...grpc.CallOption) (*AddFriendResponse, error) {
	out := new(AddFriendResponse)
	err := c.cc.Invoke(ctx, "/v1.UserRelationService/AddFriend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRelationServiceClient) ConfirmFriend(ctx context.Context, in *ConfirmFriendRequest, opts ...grpc.CallOption) (*ConfirmFriendResponse, error) {
	out := new(ConfirmFriendResponse)
	err := c.cc.Invoke(ctx, "/v1.UserRelationService/ConfirmFriend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRelationServiceClient) DeleteFriend(ctx context.Context, in *DeleteFriendRequest, opts ...grpc.CallOption) (*DeleteFriendResponse, error) {
	out := new(DeleteFriendResponse)
	err := c.cc.Invoke(ctx, "/v1.UserRelationService/DeleteFriend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRelationServiceClient) AddBlacklist(ctx context.Context, in *AddBlacklistRequest, opts ...grpc.CallOption) (*AddBlacklistResponse, error) {
	out := new(AddBlacklistResponse)
	err := c.cc.Invoke(ctx, "/v1.UserRelationService/AddBlacklist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRelationServiceClient) DeleteBlacklist(ctx context.Context, in *DeleteBlacklistRequest, opts ...grpc.CallOption) (*DeleteBlacklistResponse, error) {
	out := new(DeleteBlacklistResponse)
	err := c.cc.Invoke(ctx, "/v1.UserRelationService/DeleteBlacklist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRelationServiceClient) GetFriendList(ctx context.Context, in *GetFriendListRequest, opts ...grpc.CallOption) (*GetFriendListResponse, error) {
	out := new(GetFriendListResponse)
	err := c.cc.Invoke(ctx, "/v1.UserRelationService/GetFriendList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRelationServiceClient) GetBlacklist(ctx context.Context, in *GetBlacklistRequest, opts ...grpc.CallOption) (*GetBlacklistResponse, error) {
	out := new(GetBlacklistResponse)
	err := c.cc.Invoke(ctx, "/v1.UserRelationService/GetBlacklist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRelationServiceClient) GetUserRelation(ctx context.Context, in *GetUserRelationRequest, opts ...grpc.CallOption) (*GetUserRelationResponse, error) {
	out := new(GetUserRelationResponse)
	err := c.cc.Invoke(ctx, "/v1.UserRelationService/GetUserRelation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserRelationServiceServer is the server API for UserRelationService service.
// All implementations must embed UnimplementedUserRelationServiceServer
// for forward compatibility
type UserRelationServiceServer interface {
	AddFriend(context.Context, *AddFriendRequest) (*AddFriendResponse, error)
	ConfirmFriend(context.Context, *ConfirmFriendRequest) (*ConfirmFriendResponse, error)
	DeleteFriend(context.Context, *DeleteFriendRequest) (*DeleteFriendResponse, error)
	AddBlacklist(context.Context, *AddBlacklistRequest) (*AddBlacklistResponse, error)
	DeleteBlacklist(context.Context, *DeleteBlacklistRequest) (*DeleteBlacklistResponse, error)
	GetFriendList(context.Context, *GetFriendListRequest) (*GetFriendListResponse, error)
	GetBlacklist(context.Context, *GetBlacklistRequest) (*GetBlacklistResponse, error)
	GetUserRelation(context.Context, *GetUserRelationRequest) (*GetUserRelationResponse, error)
	mustEmbedUnimplementedUserRelationServiceServer()
}

// UnimplementedUserRelationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserRelationServiceServer struct {
}

func (UnimplementedUserRelationServiceServer) AddFriend(context.Context, *AddFriendRequest) (*AddFriendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFriend not implemented")
}
func (UnimplementedUserRelationServiceServer) ConfirmFriend(context.Context, *ConfirmFriendRequest) (*ConfirmFriendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmFriend not implemented")
}
func (UnimplementedUserRelationServiceServer) DeleteFriend(context.Context, *DeleteFriendRequest) (*DeleteFriendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFriend not implemented")
}
func (UnimplementedUserRelationServiceServer) AddBlacklist(context.Context, *AddBlacklistRequest) (*AddBlacklistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBlacklist not implemented")
}
func (UnimplementedUserRelationServiceServer) DeleteBlacklist(context.Context, *DeleteBlacklistRequest) (*DeleteBlacklistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBlacklist not implemented")
}
func (UnimplementedUserRelationServiceServer) GetFriendList(context.Context, *GetFriendListRequest) (*GetFriendListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFriendList not implemented")
}
func (UnimplementedUserRelationServiceServer) GetBlacklist(context.Context, *GetBlacklistRequest) (*GetBlacklistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlacklist not implemented")
}
func (UnimplementedUserRelationServiceServer) GetUserRelation(context.Context, *GetUserRelationRequest) (*GetUserRelationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserRelation not implemented")
}
func (UnimplementedUserRelationServiceServer) mustEmbedUnimplementedUserRelationServiceServer() {}

// UnsafeUserRelationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserRelationServiceServer will
// result in compilation errors.
type UnsafeUserRelationServiceServer interface {
	mustEmbedUnimplementedUserRelationServiceServer()
}

func RegisterUserRelationServiceServer(s grpc.ServiceRegistrar, srv UserRelationServiceServer) {
	s.RegisterService(&UserRelationService_ServiceDesc, srv)
}

func _UserRelationService_AddFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFriendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRelationServiceServer).AddFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UserRelationService/AddFriend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRelationServiceServer).AddFriend(ctx, req.(*AddFriendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRelationService_ConfirmFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmFriendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRelationServiceServer).ConfirmFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UserRelationService/ConfirmFriend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRelationServiceServer).ConfirmFriend(ctx, req.(*ConfirmFriendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRelationService_DeleteFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFriendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRelationServiceServer).DeleteFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UserRelationService/DeleteFriend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRelationServiceServer).DeleteFriend(ctx, req.(*DeleteFriendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRelationService_AddBlacklist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBlacklistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRelationServiceServer).AddBlacklist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UserRelationService/AddBlacklist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRelationServiceServer).AddBlacklist(ctx, req.(*AddBlacklistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRelationService_DeleteBlacklist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBlacklistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRelationServiceServer).DeleteBlacklist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UserRelationService/DeleteBlacklist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRelationServiceServer).DeleteBlacklist(ctx, req.(*DeleteBlacklistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRelationService_GetFriendList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFriendListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRelationServiceServer).GetFriendList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UserRelationService/GetFriendList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRelationServiceServer).GetFriendList(ctx, req.(*GetFriendListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRelationService_GetBlacklist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlacklistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRelationServiceServer).GetBlacklist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UserRelationService/GetBlacklist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRelationServiceServer).GetBlacklist(ctx, req.(*GetBlacklistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRelationService_GetUserRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRelationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRelationServiceServer).GetUserRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UserRelationService/GetUserRelation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRelationServiceServer).GetUserRelation(ctx, req.(*GetUserRelationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserRelationService_ServiceDesc is the grpc.ServiceDesc for UserRelationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserRelationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.UserRelationService",
	HandlerType: (*UserRelationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddFriend",
			Handler:    _UserRelationService_AddFriend_Handler,
		},
		{
			MethodName: "ConfirmFriend",
			Handler:    _UserRelationService_ConfirmFriend_Handler,
		},
		{
			MethodName: "DeleteFriend",
			Handler:    _UserRelationService_DeleteFriend_Handler,
		},
		{
			MethodName: "AddBlacklist",
			Handler:    _UserRelationService_AddBlacklist_Handler,
		},
		{
			MethodName: "DeleteBlacklist",
			Handler:    _UserRelationService_DeleteBlacklist_Handler,
		},
		{
			MethodName: "GetFriendList",
			Handler:    _UserRelationService_GetFriendList_Handler,
		},
		{
			MethodName: "GetBlacklist",
			Handler:    _UserRelationService_GetBlacklist_Handler,
		},
		{
			MethodName: "GetUserRelation",
			Handler:    _UserRelationService_GetUserRelation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user_relation.proto",
}
