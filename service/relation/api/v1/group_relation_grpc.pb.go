// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: group_relation.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GroupRelationServiceClient is the client API for GroupRelationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GroupRelationServiceClient interface {
	InsertUserGroup(ctx context.Context, in *UserGroupRequest, opts ...grpc.CallOption) (*UserGroupResponse, error)
	GetUserGroupIDs(ctx context.Context, in *GroupID, opts ...grpc.CallOption) (*UserIDs, error)
}

type groupRelationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGroupRelationServiceClient(cc grpc.ClientConnInterface) GroupRelationServiceClient {
	return &groupRelationServiceClient{cc}
}

func (c *groupRelationServiceClient) InsertUserGroup(ctx context.Context, in *UserGroupRequest, opts ...grpc.CallOption) (*UserGroupResponse, error) {
	out := new(UserGroupResponse)
	err := c.cc.Invoke(ctx, "/v1.GroupRelationService/InsertUserGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupRelationServiceClient) GetUserGroupIDs(ctx context.Context, in *GroupID, opts ...grpc.CallOption) (*UserIDs, error) {
	out := new(UserIDs)
	err := c.cc.Invoke(ctx, "/v1.GroupRelationService/GetUserGroupIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GroupRelationServiceServer is the server API for GroupRelationService service.
// All implementations must embed UnimplementedGroupRelationServiceServer
// for forward compatibility
type GroupRelationServiceServer interface {
	InsertUserGroup(context.Context, *UserGroupRequest) (*UserGroupResponse, error)
	GetUserGroupIDs(context.Context, *GroupID) (*UserIDs, error)
	mustEmbedUnimplementedGroupRelationServiceServer()
}

// UnimplementedGroupRelationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGroupRelationServiceServer struct {
}

func (UnimplementedGroupRelationServiceServer) InsertUserGroup(context.Context, *UserGroupRequest) (*UserGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertUserGroup not implemented")
}
func (UnimplementedGroupRelationServiceServer) GetUserGroupIDs(context.Context, *GroupID) (*UserIDs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserGroupIDs not implemented")
}
func (UnimplementedGroupRelationServiceServer) mustEmbedUnimplementedGroupRelationServiceServer() {}

// UnsafeGroupRelationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GroupRelationServiceServer will
// result in compilation errors.
type UnsafeGroupRelationServiceServer interface {
	mustEmbedUnimplementedGroupRelationServiceServer()
}

func RegisterGroupRelationServiceServer(s grpc.ServiceRegistrar, srv GroupRelationServiceServer) {
	s.RegisterService(&GroupRelationService_ServiceDesc, srv)
}

func _GroupRelationService_InsertUserGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupRelationServiceServer).InsertUserGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.GroupRelationService/InsertUserGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupRelationServiceServer).InsertUserGroup(ctx, req.(*UserGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupRelationService_GetUserGroupIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupRelationServiceServer).GetUserGroupIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.GroupRelationService/GetUserGroupIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupRelationServiceServer).GetUserGroupIDs(ctx, req.(*GroupID))
	}
	return interceptor(ctx, in, info, handler)
}

// GroupRelationService_ServiceDesc is the grpc.ServiceDesc for GroupRelationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GroupRelationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.GroupRelationService",
	HandlerType: (*GroupRelationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InsertUserGroup",
			Handler:    _GroupRelationService_InsertUserGroup_Handler,
		},
		{
			MethodName: "GetUserGroupIDs",
			Handler:    _GroupRelationService_GetUserGroupIDs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "group_relation.proto",
}
