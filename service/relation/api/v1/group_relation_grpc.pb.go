// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: api/v1/group_relation.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GroupRelationService_JoinGroup_FullMethodName               = "/v1.GroupRelationService/JoinGroup"
	GroupRelationService_GetUserGroupIDs_FullMethodName         = "/v1.GroupRelationService/GetUserGroupIDs"
	GroupRelationService_ApproveJoinGroup_FullMethodName        = "/v1.GroupRelationService/ApproveJoinGroup"
	GroupRelationService_RejectJoinGroup_FullMethodName         = "/v1.GroupRelationService/RejectJoinGroup"
	GroupRelationService_RemoveFromGroup_FullMethodName         = "/v1.GroupRelationService/RemoveFromGroup"
	GroupRelationService_LeaveGroup_FullMethodName              = "/v1.GroupRelationService/LeaveGroup"
	GroupRelationService_GetGroupJoinRequestList_FullMethodName = "/v1.GroupRelationService/GetGroupJoinRequestList"
	GroupRelationService_GetGroupRelation_FullMethodName        = "/v1.GroupRelationService/GetGroupRelation"
)

// GroupRelationServiceClient is the client API for GroupRelationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GroupRelationServiceClient interface {
	JoinGroup(ctx context.Context, in *JoinGroupRequest, opts ...grpc.CallOption) (*JoinGroupResponse, error)
	GetUserGroupIDs(ctx context.Context, in *GroupID, opts ...grpc.CallOption) (*UserIDs, error)
	ApproveJoinGroup(ctx context.Context, in *ApproveJoinGroupRequest, opts ...grpc.CallOption) (*ApproveJoinGroupResponse, error)
	RejectJoinGroup(ctx context.Context, in *RejectJoinGroupRequest, opts ...grpc.CallOption) (*RejectJoinGroupResponse, error)
	RemoveFromGroup(ctx context.Context, in *RemoveFromGroupRequest, opts ...grpc.CallOption) (*RemoveFromGroupResponse, error)
	LeaveGroup(ctx context.Context, in *LeaveGroupRequest, opts ...grpc.CallOption) (*LeaveGroupResponse, error)
	GetGroupJoinRequestList(ctx context.Context, in *GetGroupJoinRequestListRequest, opts ...grpc.CallOption) (*GroupJoinRequestListResponse, error)
	GetGroupRelation(ctx context.Context, in *GetGroupRelationRequest, opts ...grpc.CallOption) (*GetGroupRelationResponse, error)
}

type groupRelationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGroupRelationServiceClient(cc grpc.ClientConnInterface) GroupRelationServiceClient {
	return &groupRelationServiceClient{cc}
}

func (c *groupRelationServiceClient) JoinGroup(ctx context.Context, in *JoinGroupRequest, opts ...grpc.CallOption) (*JoinGroupResponse, error) {
	out := new(JoinGroupResponse)
	err := c.cc.Invoke(ctx, GroupRelationService_JoinGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupRelationServiceClient) GetUserGroupIDs(ctx context.Context, in *GroupID, opts ...grpc.CallOption) (*UserIDs, error) {
	out := new(UserIDs)
	err := c.cc.Invoke(ctx, GroupRelationService_GetUserGroupIDs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupRelationServiceClient) ApproveJoinGroup(ctx context.Context, in *ApproveJoinGroupRequest, opts ...grpc.CallOption) (*ApproveJoinGroupResponse, error) {
	out := new(ApproveJoinGroupResponse)
	err := c.cc.Invoke(ctx, GroupRelationService_ApproveJoinGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupRelationServiceClient) RejectJoinGroup(ctx context.Context, in *RejectJoinGroupRequest, opts ...grpc.CallOption) (*RejectJoinGroupResponse, error) {
	out := new(RejectJoinGroupResponse)
	err := c.cc.Invoke(ctx, GroupRelationService_RejectJoinGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupRelationServiceClient) RemoveFromGroup(ctx context.Context, in *RemoveFromGroupRequest, opts ...grpc.CallOption) (*RemoveFromGroupResponse, error) {
	out := new(RemoveFromGroupResponse)
	err := c.cc.Invoke(ctx, GroupRelationService_RemoveFromGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupRelationServiceClient) LeaveGroup(ctx context.Context, in *LeaveGroupRequest, opts ...grpc.CallOption) (*LeaveGroupResponse, error) {
	out := new(LeaveGroupResponse)
	err := c.cc.Invoke(ctx, GroupRelationService_LeaveGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupRelationServiceClient) GetGroupJoinRequestList(ctx context.Context, in *GetGroupJoinRequestListRequest, opts ...grpc.CallOption) (*GroupJoinRequestListResponse, error) {
	out := new(GroupJoinRequestListResponse)
	err := c.cc.Invoke(ctx, GroupRelationService_GetGroupJoinRequestList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupRelationServiceClient) GetGroupRelation(ctx context.Context, in *GetGroupRelationRequest, opts ...grpc.CallOption) (*GetGroupRelationResponse, error) {
	out := new(GetGroupRelationResponse)
	err := c.cc.Invoke(ctx, GroupRelationService_GetGroupRelation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GroupRelationServiceServer is the server API for GroupRelationService service.
// All implementations must embed UnimplementedGroupRelationServiceServer
// for forward compatibility
type GroupRelationServiceServer interface {
	JoinGroup(context.Context, *JoinGroupRequest) (*JoinGroupResponse, error)
	GetUserGroupIDs(context.Context, *GroupID) (*UserIDs, error)
	ApproveJoinGroup(context.Context, *ApproveJoinGroupRequest) (*ApproveJoinGroupResponse, error)
	RejectJoinGroup(context.Context, *RejectJoinGroupRequest) (*RejectJoinGroupResponse, error)
	RemoveFromGroup(context.Context, *RemoveFromGroupRequest) (*RemoveFromGroupResponse, error)
	LeaveGroup(context.Context, *LeaveGroupRequest) (*LeaveGroupResponse, error)
	GetGroupJoinRequestList(context.Context, *GetGroupJoinRequestListRequest) (*GroupJoinRequestListResponse, error)
	GetGroupRelation(context.Context, *GetGroupRelationRequest) (*GetGroupRelationResponse, error)
	mustEmbedUnimplementedGroupRelationServiceServer()
}

// UnimplementedGroupRelationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGroupRelationServiceServer struct {
}

func (UnimplementedGroupRelationServiceServer) JoinGroup(context.Context, *JoinGroupRequest) (*JoinGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinGroup not implemented")
}
func (UnimplementedGroupRelationServiceServer) GetUserGroupIDs(context.Context, *GroupID) (*UserIDs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserGroupIDs not implemented")
}
func (UnimplementedGroupRelationServiceServer) ApproveJoinGroup(context.Context, *ApproveJoinGroupRequest) (*ApproveJoinGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveJoinGroup not implemented")
}
func (UnimplementedGroupRelationServiceServer) RejectJoinGroup(context.Context, *RejectJoinGroupRequest) (*RejectJoinGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RejectJoinGroup not implemented")
}
func (UnimplementedGroupRelationServiceServer) RemoveFromGroup(context.Context, *RemoveFromGroupRequest) (*RemoveFromGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFromGroup not implemented")
}
func (UnimplementedGroupRelationServiceServer) LeaveGroup(context.Context, *LeaveGroupRequest) (*LeaveGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveGroup not implemented")
}
func (UnimplementedGroupRelationServiceServer) GetGroupJoinRequestList(context.Context, *GetGroupJoinRequestListRequest) (*GroupJoinRequestListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupJoinRequestList not implemented")
}
func (UnimplementedGroupRelationServiceServer) GetGroupRelation(context.Context, *GetGroupRelationRequest) (*GetGroupRelationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupRelation not implemented")
}
func (UnimplementedGroupRelationServiceServer) mustEmbedUnimplementedGroupRelationServiceServer() {}

// UnsafeGroupRelationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GroupRelationServiceServer will
// result in compilation errors.
type UnsafeGroupRelationServiceServer interface {
	mustEmbedUnimplementedGroupRelationServiceServer()
}

func RegisterGroupRelationServiceServer(s grpc.ServiceRegistrar, srv GroupRelationServiceServer) {
	s.RegisterService(&GroupRelationService_ServiceDesc, srv)
}

func _GroupRelationService_JoinGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupRelationServiceServer).JoinGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupRelationService_JoinGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupRelationServiceServer).JoinGroup(ctx, req.(*JoinGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupRelationService_GetUserGroupIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupRelationServiceServer).GetUserGroupIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupRelationService_GetUserGroupIDs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupRelationServiceServer).GetUserGroupIDs(ctx, req.(*GroupID))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupRelationService_ApproveJoinGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveJoinGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupRelationServiceServer).ApproveJoinGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupRelationService_ApproveJoinGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupRelationServiceServer).ApproveJoinGroup(ctx, req.(*ApproveJoinGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupRelationService_RejectJoinGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RejectJoinGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupRelationServiceServer).RejectJoinGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupRelationService_RejectJoinGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupRelationServiceServer).RejectJoinGroup(ctx, req.(*RejectJoinGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupRelationService_RemoveFromGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveFromGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupRelationServiceServer).RemoveFromGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupRelationService_RemoveFromGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupRelationServiceServer).RemoveFromGroup(ctx, req.(*RemoveFromGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupRelationService_LeaveGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupRelationServiceServer).LeaveGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupRelationService_LeaveGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupRelationServiceServer).LeaveGroup(ctx, req.(*LeaveGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupRelationService_GetGroupJoinRequestList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupJoinRequestListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupRelationServiceServer).GetGroupJoinRequestList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupRelationService_GetGroupJoinRequestList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupRelationServiceServer).GetGroupJoinRequestList(ctx, req.(*GetGroupJoinRequestListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupRelationService_GetGroupRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupRelationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupRelationServiceServer).GetGroupRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupRelationService_GetGroupRelation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupRelationServiceServer).GetGroupRelation(ctx, req.(*GetGroupRelationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GroupRelationService_ServiceDesc is the grpc.ServiceDesc for GroupRelationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GroupRelationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.GroupRelationService",
	HandlerType: (*GroupRelationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "JoinGroup",
			Handler:    _GroupRelationService_JoinGroup_Handler,
		},
		{
			MethodName: "GetUserGroupIDs",
			Handler:    _GroupRelationService_GetUserGroupIDs_Handler,
		},
		{
			MethodName: "ApproveJoinGroup",
			Handler:    _GroupRelationService_ApproveJoinGroup_Handler,
		},
		{
			MethodName: "RejectJoinGroup",
			Handler:    _GroupRelationService_RejectJoinGroup_Handler,
		},
		{
			MethodName: "RemoveFromGroup",
			Handler:    _GroupRelationService_RemoveFromGroup_Handler,
		},
		{
			MethodName: "LeaveGroup",
			Handler:    _GroupRelationService_LeaveGroup_Handler,
		},
		{
			MethodName: "GetGroupJoinRequestList",
			Handler:    _GroupRelationService_GetGroupJoinRequestList_Handler,
		},
		{
			MethodName: "GetGroupRelation",
			Handler:    _GroupRelationService_GetGroupRelation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/group_relation.proto",
}
